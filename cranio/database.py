"""
Relational database definitions and classes/functions for database management.
"""
from typing import Tuple, List, Iterable
from contextlib import contextmanager, closing
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.engine import Engine
from sqlalchemy import (Column, Integer, String, DateTime, Numeric, Boolean, ForeignKey, create_engine,
                        CheckConstraint, event)
from cranio.core import generate_unique_id, utc_datetime
from cranio.utils import get_logging_levels
from cranio import __version__

# Define database connection
db_engine = None
Base = declarative_base()
# Disable expiry on commit to prevent detachment of database objects (#91)
SQLSession = sessionmaker(expire_on_commit=False)


def _fk_pragma_on_connect(dbapi_con, con_record):
    """
    Enforce sqlite foreign key constraints.

    :param dbapi_con:
    :param con_record:
    :return:
    """
    dbapi_con.execute('pragma foreign_keys=ON')


def get_engine() -> Engine:
    """

    :return: Global database engine
    """
    return db_engine


def init_database(engine_str: str='sqlite://') -> None:
    """
    Initialize database and populate lookup tables.

    :param engine_str: Database engine initialization string
    :return: None
    """
    global db_engine
    db_engine = create_engine(engine_str)
    # enforce sqlite foreign keys
    event.listen(db_engine, 'connect', _fk_pragma_on_connect)
    # create all databases
    Base.metadata.create_all(db_engine)
    # populate lookup tables
    with session_scope() as s:
        # log levels
        for level, level_name in get_logging_levels().items():
            enter_if_not_exists(s, LogLevel(level=level, level_name=level_name))
        # event types
        for event_type in EventType.event_types():
            enter_if_not_exists(s, event_type)


def clear_database() -> None:
    """
    Truncate all database tables.

    .. todo:: Needs to be tested!

    :return: None
    """
    with closing(get_engine().connect()) as con:
        trans = con.begin()
        for table in reversed(Base.metadata.sorted_tables):
            con.execute(table.delete())
        trans.commit()


def enter_if_not_exists(session: SQLSession, row: Base):
    """
    Enter row to database if it doesn't already exist.

    :param session:
    :param row:
    :return:
    """
    session.merge(row)


@contextmanager
def session_scope(engine: Engine=None):
    """
    Provide a transactional scope around a series of operations.

    :param engine: Database engine
    :return:
    """
    if engine is None:
        # use global db_engine by default
        engine = db_engine
    SQLSession.configure(bind=engine)
    session = SQLSession()
    try:
        yield session
        session.commit()
    except:
        session.rollback()
        raise
    finally:
        session.close()


class InstanceBase:
    """ Base class for handling class instances, or rather instance identifies. """

    @classmethod
    def get_instance(cls):
        return cls.instance

    @classmethod
    def set_instance(cls, obj):
        cls.instance = obj

    @classmethod
    def reset_instance(cls):
        cls.instance = None


class DictMixin:

    def as_dict(self) -> dict:
        """
        Return self as a {column: value} dictionary.
        :return:
        """
        return {key: value for key, value in self.__dict__.items() if not key.startswith('_')}

    def copy(self):
        return type(self)(**self.as_dict())

    def __str__(self):
        arg_str = ', '.join([f'{key} = {value}' for key, value in self.as_dict().items()])
        return f'{type(self).__name__}({arg_str})'


class Patient(Base, InstanceBase, DictMixin):
    """ Patient table. """
    __tablename__ = 'dim_patient'
    patient_id = Column(String, CheckConstraint('patient_id != ""'), primary_key=True,
                        comment='Patient identifier (pseudonym)')
    created_at = Column(DateTime, default=utc_datetime, comment='Patient creation date and time')
    # global instance
    instance = None

    @classmethod
    def init(cls, patient_id: str) -> str:
        """
        Initialize and insert Patienc row to database.

        :param patient_id: Patient identifier
        :return: Patient identifier
        :raises ValueError: if the Patient is already initialized
        """
        if cls.get_instance() is not None:
            raise ValueError('{} already initialized'.format(cls.__name__))
        with session_scope() as s:
            patient = cls(patient_id=patient_id)
            s.add(patient)
            cls.set_instance(patient)
        return cls.get_instance()


class Session(Base, InstanceBase, DictMixin):
    """ Session table. """
    __tablename__ = 'dim_session'
    session_id = Column(String, primary_key=True, default=generate_unique_id,
                comment='Autogenerated session identifier (UUID v1)')
    started_at = Column(DateTime, comment='Session start (i.e., software launch) date and time')
    sw_version = Column(String, default=__version__)
    # global instance
    instance = None

    @classmethod
    def init(cls) -> str:
        """
        Initialize and insert Session row to database.

        :return: Autogenerated Session identifier
        :raises ValueError: if the Session is already initialized
        """
        if cls.get_instance() is not None:
            raise ValueError('{} already initialized'.format(cls.__name__))
        with session_scope() as s:
            session = cls()
            s.add(session)
            cls.set_instance(session)
        return cls.get_instance()


class AnnotatedEvent(Base, DictMixin):
    """ Annotated events table. """
    __tablename__ = 'fact_annotated_event'
    event_type = Column(String, ForeignKey('dim_event_type.event_type'), primary_key=True,
                        comment='Event type identifier')
    event_num = Column(Integer, primary_key=True, comment='Event number')
    document_id = Column(String, ForeignKey('dim_document.document_id'), primary_key=True)
    event_begin = Column(Numeric, comment='Allow placeholder as NULL')
    event_end = Column(Numeric, comment='Allow placeholder as NULL')
    annotation_done = Column(Boolean, comment='Indicates whether the annotation has been done or if the event is '
                                              'just a placeholder to be annotated later', nullable=False)
    recorded = Column(Boolean, comment='Indicates if the event was recorded. '
                                       'If false, the event did occur but the operator failed to record it.',
                      nullable=False)


class Document(Base, InstanceBase, DictMixin):
    """ Document table. """
    __tablename__ = 'dim_document'
    document_id = Column(String, primary_key=True, default=generate_unique_id,
                comment='Autogenerated document identifier (UUID v1)')
    session_id = Column(String, ForeignKey('dim_session.session_id'), nullable=False)
    patient_id = Column(String, ForeignKey('dim_patient.patient_id'), nullable=False)
    sensor_serial_number = Column(String, ForeignKey('dim_hw_sensor.sensor_serial_number'), nullable=False,
                                  comment='Sensor serial number (e.g., FTSLQ6QIA)')
    distractor_id = Column(Integer, comment='Distractor identifier (e.g., 1 or 2)')
    started_at = Column(DateTime, comment='Data collection start date and time (UTC+0)')
    operator = Column(String, comment='Person responsible for the distraction')
    notes = Column(String, comment='User notes')
    full_turn_count = Column(Numeric, comment='Number of performed full turns (decimals supported)')
    # TODO: remodel missed_distractors (comma-separated list is stupid)
    missed_distractors = Column(String, comment='Comma-separated list of missed distractor identifiers')
    distraction_plan_followed = Column(Boolean, comment='Boolean indicating if the distraction plan was followed')
    # global instance
    instance = None

    @classmethod
    def init(cls, sensor_serial_number: str, patient_id: str=None) -> str:
        """
        Initialize and insert Document row to database.

        :param sensor_serial_number:
        :param patient_id: Patient identifier to which the Document relates to
        :return: Autogenerated Document identifier
        :raises ValueError: if the Document is already initialized
        :raises ValueError: if Session or Patient have not been initialized yet
        """
        if cls.get_instance() is not None:
            raise ValueError('{} already initialized'.format(cls.__name__))
        if patient_id is None:
            patient_id = Patient.get_instance().patient_id
        if Session.get_instance() is None:
            raise ValueError('Session must be initialized before Document')
        if patient_id is None:
            raise ValueError('Patient must be initialized before Document')
        with session_scope() as s:
            document = cls(session_id=Session.get_instance().session_id, patient_id=patient_id,
                           sensor_serial_number=sensor_serial_number)
            s.add(document)
            cls.set_instance(document)
        return cls.get_instance()

    def get_related_time_series(self) -> Tuple[List[float], List[float]]:
        x, y = list(), list()
        with session_scope() as s:
            measurements = s.query(Measurement).filter(Measurement.document_id == self.document_id).all()
            if len(measurements) == 0:
                return x, y
            x, y = zip(*[(float(m.time_s), float(m.torque_Nm)) for m in measurements])
        return x, y

    def get_related_events(self) -> List[AnnotatedEvent]:
        """
        Return list of annotated events related to the document.

        :return:
        """
        with session_scope() as s:
            events = s.query(AnnotatedEvent).filter(AnnotatedEvent.document_id == self.document_id).all()
        return events


class Measurement(Base, DictMixin):
    """ Measurement table. """
    __tablename__ = 'fact_measurement'
    measurement_id = Column(Integer, primary_key=True, autoincrement=True)
    document_id = Column(String, ForeignKey('dim_document.document_id'), nullable=False)
    time_s = Column(Numeric, nullable=False, comment='Time since start of data collection in seconds')
    torque_Nm = Column(Numeric, nullable=False, comment='Torque measured from the screwdriver')


class LogLevel(Base, DictMixin):
    """ Log level Lookup table. """
    __tablename__ = 'dim_log_level'
    level = Column(Integer, primary_key=True, comment='Level priority')
    level_name = Column(String, nullable=False, comment='E.g. ERROR or INFO')


class Log(Base, DictMixin):
    """ Log table. """
    __tablename__ = 'fact_log'
    log_id = Column(Integer, primary_key=True, autoincrement=True)
    session_id = Column(String, ForeignKey('dim_session.session_id'), nullable=False)
    created_at = Column(DateTime, nullable=False, comment='Log entry date and time with second precision (UTC+0)')
    logger = Column(String, nullable=False, comment='Name of the logger')
    level = Column(Integer, ForeignKey('dim_log_level.level'), nullable=False)
    trace = Column(String, comment='Error traceback')
    message = Column(String, nullable=False, comment='Log entry')


class EventType(Base, DictMixin):
    """ Event types lookup table. """
    __tablename__ = 'dim_event_type'
    event_type = Column(String, primary_key=True, comment='Event type identifier (e.g., "D" for distraction)')
    event_type_description = Column(String)

    @classmethod
    def distraction_event_type(cls):
        """ Return EventType for distraction event. """
        return cls(event_type='D', event_type_description='Distraction event')

    @classmethod
    def event_types(cls) -> List:
        """ Return list of supported event types. """
        return [cls.distraction_event_type()]


class SensorInfo(Base, DictMixin):
    """ Sensor information table. """
    __tablename__ = 'dim_hw_sensor'
    # serial number as natural primary key
    sensor_serial_number = Column(String, primary_key=True, comment='Sensor serial number')
    sensor_name = Column(String, comment='Sensor name')
    displacement_mm_per_full_turn = Column(Numeric, comment='Sensor-specific displacement (mm) per full turn. '
                                                            'The value is determined during hardware calibration.')
    turns_in_full_turn = Column(Numeric, comment='Sensor-specific number of turns in one full turn.')


def export_schema_graph(name: str) -> None:
    """
    Export database schema graph as a .png image.

    .. note:: Requires Graphviz (download from http://www.graphviz.org/download/)

    :param name: Output image file name
    :return: None
    """
    from sqlalchemy_schemadisplay import create_schema_graph
    graph = create_schema_graph(metadata=Base.metadata, show_datatypes=False, show_indexes=False,
                                rankdir='TB', concentrate=False)
    graph.write_png(name)


def insert_time_series_to_database(time_s: Iterable[float], torque_Nm: Iterable[float],
                                   document: Document) -> List[Measurement]:
    """ Helper function. """
    measurements = []
    with session_scope() as s:
        for x, y in zip(time_s, torque_Nm):
            m = Measurement(document_id=document.document_id, time_s=x, torque_Nm=y)
            measurements.append(m)
            s.add(m)
    return measurements
